"""
Malware Sample Uploader

Creates a simple flask page for uploading files, then display and downloading them.
"""

import os
import json
import hashlib
import pyminizip
from flask import Flask, request, redirect, url_for, render_template, send_from_directory
from app import app
from werkzeug.utils import secure_filename
from time import gmtime, strftime

__author__ = "Sean Breen"
__copyright__ = "Copyright (C) 2018"
__credits__ = ["Sean Breen"]
__license__ = "MIT License"
__version__ = "1.0.1"
__maintainer__ = "Sean B"
__email__ = "sean@shadow.engineering"



"""
Function: index
Description:
        This function displays the index page
"""
@app.route('/')
@app.route('/index')
def index():
        return render_template('index.html')

"""
Function: create_dictionary
Description: 
        This function creates a dictionary that is used for each row in the samples.html page

Input:     filename (str)   - The name of the file 
Output:    d (dict)         - The dictionary to populate the table
"""
def create_dictionary(filename):
        d = {}
        f=os.path.join(app.config['TEMP_FOLDER'], filename)
        
        # Determining each attribute for the fields, then populate the dictionary 
        fileinfo = os.stat(f)
        filesize=str(fileinfo.st_size)
        d['date'] = strftime("%Y-%m-%d %H:%M:%S", gmtime())
        d['filename'] = filename
        d['zipfile'] = filename + '.zip'
        d['md5sum'] = hashlib.md5(open(f,'rb').read()).hexdigest()
        d['filesize'] = filesize
        return(d)

"""
Function: create_json
Description:
        This will create, or update the json file that stores all the attributes of files.
        It's used to populate the samples.html page.

Input:      filename (str)    - The name of the file
Output:     None
"""
def create_json(filename):
        # File to Store Content
        store = os.path.join(app.root_path, 'store.json')

        # To create a valid json file, we basically need a dictionary of dictionaries
        tmp = {}
        tmp[filename] = create_dictionary(filename)
        
        # Retrieve and Update JSON file
        if os.stat(store).st_size > 0:
                with open(store,'r') as f:
                        content = json.load(f)
                        f.close()
                with open(store,'w') as f:
                        content.update(tmp)
                        output = json.dumps(content, f, indent=4)
                        f.write(output)
                        f.close()
        
        # Create JSON file if it doesn't exist
        else:
                with open(store,'r+') as f:
                        output = json.dumps(tmp, f, indent=4)
                        f.write(output)
                        f.close()

"""
Function: allowed_file
Description:
        This will check the file extension of uploaded files to determine if it's in the permitted
        list of extensions.

Input:      None
Output:     
"""
def allowed_file(filename):
        ALLOWED_EXTENSIONS = set(['txt','pdf','bin','exe','doc','docx','xls','xlsx','zip','apk','rar','html','eml','msg','jar'])
        return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

"""
Function: zip_upload
Description:
        This function writes the upload to a temporary directory, then creates a password protected zip file for download.

Input:      filename (str) - name of file that's being uploaded
Output:     None
"""
def zip_upload(filename):
        zipname = filename + '.zip'
        zippass = 'infected'
        upload = os.path.join(app.config['TEMP_FOLDER'], filename)
        output = os.path.join(app.config['UPLOAD_FOLDER'], zipname)
        pyminizip.compress(upload, None, output, zippass, 0)

"""
Function: delete_temp
Description:
        This function deletes the raw, uploaded file to save space.

Input:      filename (str) - name of the file that's stored in the /tmp folder
Output:     None
"""
def delete_temp(filename):
        upload = os.path.join(app.config['TEMP_FOLDER'], filename)
        if os.path.exists(upload):
                try:
                        os.remove(upload)
                except OSError as e:
                        pass

"""
Function: uploader
Description:
        Function to upload the file

Input:      None
Output:     Redirection to /samples page, or updated index.html page with template

"""
@app.route('/uploader', methods= ['GET','POST'])
def uploader():
        if request.method == 'POST':
                if 'file' not in request.files:
                        return render_template('index.html',error='No File Part')
                f = request.files['file']
                if f.filename == '':
                        return render_template('index.html',error='Empty Filename')
                if f and allowed_file(f.filename):
                        filename = secure_filename(f.filename)
                        dst = os.path.join(app.config['TEMP_FOLDER'], filename)
                        f.save(dst)
                        zip_upload(filename)
                        create_json(filename)
                        delete_temp(filename)
                        return redirect('/samples', code=302)
                else: 
                        return render_template('index.html',error='An Invalid File was Selected - Permitted Extensions: txt, pdf, bin, exe, doc, docx, xls, xlsx, zip, apk, rar, html, eml, msg, jar')

"""
Function: uploaded_file
Description:
        Used by flask for linking to uploaded files.

Input:      filename (str)  - The name of the file that's been uploaded
Output:     url string of path
"""
@app.route('/uploads/<filename>')
def uploaded_file(filename):
        return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

"""
Function: read_json
Description:
        Reads in the JSON that's used to store information relating to uploaded files.

Input:      None
Output:     Content (json) - Content read in from store.json
"""
def read_json():
        store = os.path.join(app.root_path, 'store.json')

        with open(store,'r') as f:
                content = json.load(f)
                f.close()

        return content
        
"""
Function: samples
Description:
        Displays the samples.html page, a table of all current samples that have been uploaded.
        This populates a ninja2 template with the upload time, file name, file hash, and md5sum.

        The filename links to the filename, while the md5sum links to the virustotal page of the md5sum

Input:      None
Output:     Ninja2 template of samples.html
"""
@app.route('/samples')
def samples():
        samples = []
        content = read_json()

        # Reads the JSON, which is a dictionary of dictionaries, and appends a key for the file path
        for key, value in content.items():
                value['path'] = url_for('uploaded_file', filename=value['zipfile'])
                samples.append(value)
        
        return render_template('samples.html',samples=samples)

